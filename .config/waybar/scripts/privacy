#!/usr/bin/env python3
import subprocess
import json
import re

def _generate_dict_interfaces(longstring: str, verbose: bool = False):
    mydict = {}
    text_in_lines = longstring.split("\n")
    first_level = "X"

    for line in text_in_lines:
        is_interface = True
        regex_id = r"\tid (\d+), type PipeWire:Interface:Node\/\d+"
        if tenative_id := re.search(regex_id, line):
            # when interface starts
            results_regex_id = tenative_id.groups()[0]
            mydict[results_regex_id] = {}
            is_interface = False

        if is_interface:
            if "\t\t" in line:
                # second level data
                data = line.replace(" \t\t", "")
                data = data.split(" = ")
                second_level = str(data[0])
                data_to_place = data[1].replace('"', "")

                mydict[results_regex_id][second_level] = data_to_place

    if verbose:
        print(mydict)

    return mydict

usingCam = False
usingMic = False
screenShare = False
screenRec = False

if re.search(
        r"uvcvideo\s+\d+\s+(\d+).*", 
        subprocess.run(['lsmod'], capture_output=True).stdout.decode()
        ).groups()[0] != '0':
    print('Using Camera')

interfaces = _generate_dict_interfaces(subprocess.run(['pw-cli', 'ls', 'Node'], capture_output=True).stdout.decode())
__import__('pprint').pprint(interfaces)

if 'media.class = "Stream/Input/Audio"' in subprocess.run(['pw-cli', 'ls'], capture_output=True).stdout.decode():
    print('Using Microphone')

if 'media.class = "Stream/Input/Video"' in subprocess.run(['pw-cli', 'ls'], capture_output=True).stdout.decode():
    print('Using Screen Share')
