#!/usr/bin/env bash

set -e

function Help() {
  cat <<EOF
Usage: hyprecord [options ..] [mode] -- [command]

Hyprecord is an utility to easily take screen recordings in Hyprland using your mouse.

It allows taking recordings of windows, regions and monitors which are saved to a folder of your choosing.

Examples:
  capture a window                      \`hyprecord -m window\`
  capture selected monitor              \`hyprecord -m output -m DP-1\`

Options:
  -h, --help                show help message
  -o, --output-folder       directory in which to save the recording
  -f, --filename            the file name of the resulting recording
  -m, --mode                one of: output, window, region, history, active, OUTPUT_NAME
  -M, --mute                dont capture sound when recording
  -a, --audio-device        the audio-device to capture from
  -i, --init-history        how many seconds to save and starts recording
  -D, --delay               how long to delay taking the recording after selection (seconds) [not implimented]
  -d, --debug               print debug information
  -s, --silent              don't send notification when the recording is saved
  -t, --notif-timeout       notification timeout in milliseconds (default 5000)
  -- [command]              open recording with a command of your choosing. e.g. hyprecord -m window -- mirage

Modes:
  output        take recording of an entire monitor
  window        take recording of an open window
  region        take recording of selected region
  history       save the data recorded by the daemon to disk [not implimented]
  active        take screenshot of active window|output
                (you must use --mode again with the intended selection)
  OUTPUT_NAME   take screenshot of output with OUTPUT_NAME
                (you must use --mode again with the intended selection)
                (you can get this from \`hyprctl monitors\`)
EOF
}

function Print() {
  if [ $DEBUG -eq 0 ]; then
    return 0
  fi

  1>&2 printf "$@" 
}

function send_notification() {
  if [ $SILENT -eq 1 ]; then
    return 0
  fi

  notify-send "Recording saved" \
    "Video saved in <i>${1}</i>." \
    -t "$NOTIF_TIMEOUT" -i "${1}" -a Hyprecord
}

function trim() {
  Print "Geometry: %s\n" "${1}"
  local geometry="${1}"
  local xy_str=$(echo "${geometry}" | cut -d' ' -f1)
  local wh_str=$(echo "${geometry}" | cut -d' ' -f2)
  local x=`echo "${xy_str}" | cut -d',' -f1`
  local y=`echo "${xy_str}" | cut -d',' -f2`
  local width=`echo "${wh_str}" | cut -dx -f1`
  local height=`echo "${wh_str}" | cut -dx -f2`

  local max_width=`hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.x + .width) else (.x + .height) end] | max'`
  local max_height=`hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.y + .height) else (.y + .width) end] | max'`

  local min_x=`hyprctl monitors -j | jq -r '[.[] | (.x)] | min'`
  local min_y=`hyprctl monitors -j | jq -r '[.[] | (.y)] | min'`

  local cropped_x=$x
  local cropped_y=$y
  local cropped_width=$width
  local cropped_height=$height

  if ((x + width > max_width)); then
    cropped_width=$((max_width - x))
  fi
  if ((y + height > max_height)); then
    cropped_height=$((max_height - y))
  fi

  if ((x < min_x)); then
    cropped_x="$min_x"
    cropped_width=$((cropped_width + x - min_x))
  fi
  if ((y < min_y)); then
    cropped_y="$min_y"
    cropped_height=$((cropped_height + y - min_y))
  fi

  local cropped=`printf "%s,%s %sx%s\n" \
      "${cropped_x}" "${cropped_y}" \
      "${cropped_width}" "${cropped_height}"`
          Print "Crop: %s\n" "${cropped}"
          echo ${cropped}
}

function save_geometry() {
  local geometry="${1}"
  local output=""

  mkdir -p "$SAVEDIR"
  if [ $MUTE -ne 0 ]; then
    wl-screenrec -g "${geometry}" -f "$SAVE_FULLPATH" > /dev/null
  elif [ -z AUDIO_DEVICE ]; then
    wl-screenrec -g "${geometry}" -f "$SAVE_FULLPATH" --audio --audio-device $AUDIO_DEVICE > /dev/null
  else
    wl-screenrec -g "${geometry}" -f "$SAVE_FULLPATH" --audio > /dev/null
  fi
  output="$SAVE_FULLPATH"
  [ -z "$COMMAND" ] || {
    "$COMMAND" "$output"
  }

  send_notification $output
}

function begin_grab() {
  local option=$1
  case $option in
    output)
      if [ $CURRENT -eq 1 ]; then
        local geometry=`grab_active_output`
      elif [ -z $SELECTED_MONITOR ]; then
        local geometry=`grab_output`
      else
        local geometry=`grab_selected_output $SELECTED_MONITOR`
      fi
      ;;
    region)
      local geometry=`grab_region`
      ;;
    window)
      if [ $CURRENT -eq 1 ]; then
        local geometry=`grab_active_window`
      else
        local geometry=`grab_window`
      fi
      geometry=`trim "${geometry}"`
      ;;
  esac
  if [ ${DELAY} -gt 0 ] 2>/dev/null; then
    sleep ${DELAY}
  fi
  save_geometry "${geometry}"
}

function grab_output() {
  slurp -or
}

function grab_active_output() {
  local active_workspace=`hyprctl -j activeworkspace`
  local monitors=`hyprctl -j monitors`
  Print "Monitors: %s\n" "$monitors"
  Print "Active workspace: %s\n" "$active_workspace"
  local current_monitor="$(echo $monitors | jq -r 'first(.[] | select(.activeWorkspace.id == '$(echo $active_workspace | jq -r '.id')'))')"
  Print "Current output: %s\n" "$current_monitor"
  echo $current_monitor | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_selected_output() {
  local monitor=`hyprctl -j monitors | jq -r '.[] | select(.name == "'$(echo $1)'")'`
  Print "Capturing: %s\n" "${1}"
  echo $monitor | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_region() {
  slurp -d
}

function grab_window() {
  local monitors=`hyprctl -j monitors`
  local clients=`hyprctl -j clients | jq -r '[.[] | select(.workspace.id | contains('$(echo $monitors | jq -r 'map(.activeWorkspace.id) | join(",")')'))]'`
  Print "Monitors: %s\n" "$monitors"
  Print "Clients: %s\n" "$clients"
  # Generate boxes for each visible window and send that to slurp
  # through stdin
  local boxes="$(echo $clients | jq -r '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1]) \(.title)"' | cut -f1,2 -d' ')"
  Print "Boxes:\n%s\n" "$boxes"
  slurp -r <<< "$boxes"
}

function grab_active_window() {
  local active_window=`hyprctl -j activewindow`
  local box=$(echo $active_window | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"' | cut -f1,2 -d' ')
  Print "Box:\n%s\n" "$box"
  echo "$box"
}

function parse_mode() {
  local mode="${1}"

  case $mode in
    window | region | output)
      OPTION=$mode
      ;;
    active)
      CURRENT=1
      ;;
    *)
      hyprctl monitors -j | jq -re '.[] | select(.name == "'$(echo $mode)'")' &>/dev/null
      SELECTED_MONITOR=$mode
      ;;
  esac
}

function args() {
  local options=$(getopt -o hf:o:D:i:m:Madst: --long help,filename:,output-folder:,mode:,mute,audio-device:,init-history:,delay:,debug,silent,notif-timeout: -- "$@")
  echo $options
  eval set -- "$options"

  while true; do
    case "$1" in
      -h | --help)
        Help
        exit
        ;;
      -m | --mode)
        shift;
        parse_mode $1
        ;;
      -o | --output-folder)
        shift;
        SAVEDIR=$1
        ;;
      -f | --filename)
        shift;
        FILENAME=$1
        ;;
      -D | --delay)
        shift;
        DELAY=$1
        ;;
      -M | --mute)
        MUTE=1
        ;;
      -a | --audio-device)
        shift;
        AUDIO_DEVICE=$1
        ;;
      -i | --init-history)
        shift;
        RECORD_TIME=$1
        ;;
      -d | --debug)
        DEBUG=1
        ;;
      -s | --silent)
        SILENT=1
        ;;
      -t | --notif-timeout)
        shift;
        NOTIF_TIMEOUT=$1
        ;;
      --)
        shift # Skip -- argument
        COMMAND=${@:2}
        break;;
    esac
    shift
  done

  if [ -z $OPTION ]; then
    Print "A mode is required\n\nAvailable modes are:\n\toutput\n\tregion\n\twindow\n\thistory\n"
    exit 2
  fi
}

if [ $(pidof wl-screenrec) ]; then
  pkill wl-screenrec
  exit
fi

if [ -z $1 ]; then
  Help
  exit
fi

CLIPBOARD=0
DEBUG=0
SILENT=0
RAW=0
MUTE=0
AUDIO_DEVICE=
NOTIF_TIMEOUT=5000
RECORD_TIME=30
CURRENT=0
FREEZE=0
[ -z "$XDG_VIDEOS_DIR" ] && type xdg-user-dir &> /dev/null && XDG_VIDEOS_DIR=$(xdg-user-dir VIDEOS)
FILENAME="$(date +'%Y-%m-%d-%H%M%S_hyprecord.mp4')"
[ -z "$HYPRECORD_DIR" ] && SAVEDIR=${XDG_VIDEOS_DIR:=~} || SAVEDIR=${HYPRECORD_DIR}

args $0 "$@"

SAVE_FULLPATH="$SAVEDIR/$FILENAME"
[ $CLIPBOARD -eq 0 ] && Print "Saving in: %s\n" "$SAVE_FULLPATH"
begin_grab $OPTION
