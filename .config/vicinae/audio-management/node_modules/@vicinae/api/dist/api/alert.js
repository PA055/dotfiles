"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirmAlert = exports.Alert = void 0;
const node_crypto_1 = require("node:crypto");
const bus_1 = require("./bus");
const ui_1 = require("./proto/ui");
var Alert;
(function (Alert) {
    let ActionStyle;
    (function (ActionStyle) {
        ActionStyle["Default"] = "default";
        ActionStyle["Destructive"] = "destructive";
        ActionStyle["Cancel"] = "cancel";
    })(ActionStyle = Alert.ActionStyle || (Alert.ActionStyle = {}));
})(Alert || (exports.Alert = Alert = {}));
const styleMap = {
    [Alert.ActionStyle.Default]: ui_1.ConfirmAlertActionStyle.Default,
    [Alert.ActionStyle.Destructive]: ui_1.ConfirmAlertActionStyle.Destructive,
    [Alert.ActionStyle.Cancel]: ui_1.ConfirmAlertActionStyle.Cancel,
};
const confirmAlert = async (options) => {
    return new Promise(async (resolve) => {
        const handle = (0, node_crypto_1.randomUUID)();
        let confirmCallback = () => { };
        let cancelCallback = () => { };
        const { unsubscribe } = bus_1.bus.subscribe(handle, (...args) => {
            callback(!!args[0]);
        });
        const callback = (value) => {
            if (value)
                confirmCallback();
            else
                cancelCallback();
            unsubscribe();
            resolve(value);
        };
        const req = ui_1.ConfirmAlertRequest.create({
            handle,
            title: options.title,
            description: options.message ?? "Are you sure?",
            rememberUserChoice: false,
            primaryAction: {
                title: options.primaryAction?.title ?? "Confirm",
                style: styleMap[options.primaryAction?.style ?? Alert.ActionStyle.Default],
            },
            dismissAction: {
                title: options.dismissAction?.title ?? "Cancel",
                style: styleMap[options.dismissAction?.style ?? Alert.ActionStyle.Cancel],
            },
        });
        if (options.primaryAction?.onAction) {
            confirmCallback = options.primaryAction.onAction;
        }
        if (options.dismissAction?.onAction) {
            cancelCallback = options.dismissAction.onAction;
        }
        await bus_1.bus.turboRequest("ui.confirmAlert", req);
    });
};
exports.confirmAlert = confirmAlert;
